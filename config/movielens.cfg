//------------------------------------------------------------------------------
// Cofi configuration
//------------------------------------------------------------------------------

// How and where to read D. NO DEFAULT VALUE
string cofibmrm.format     SVMLIGHT 
string cofibmrm.DtrainFile  data/data-u.data_N-10_seed-0_train.lsvm
string cofibmrm.DtestFile data/data-u.data_N-10_seed-0_test.lsvm
string cofibmrm.evaluation WEAK

// The output folder. NO DEFAULT VALUE
string cofi.outfolder out/


// whether or not to use an offset
int cofi.useOffset  0 

int cofi.useGraphKernel 0

// whether or not U, M and F shall be stored at the end
int cofi.storeU   0
int cofi.storeM   0
int cofi.storeF   0

// Lambdas. NO DEFAULT VALUE
double cofi.userphase.lambda  10
double cofi.moviephase.lambda 10

// whether or not we want to use adaptive regularization
int cofi.useAdaptiveRegularization 0

double cofi.adaptiveRegularization.uExponent 0
double cofi.adaptiveRegularization.wExponent 0.5

// Dimension of U and M. 
int    cofi.dimW          100 

// The minimum progress per round
double cofi.minProgress 0.1
int  cofi.minIterations         3
int  cofi.maxIterations        30


// The loss to optimize for. NO DEFAULT VALUE 
// Valid options: NDCG, REGRESSION, ORDINAL 
string cofi.loss REGRESSION 

// Evaluation schemes
int cofi.eval.evaluateOnTestSet    1
int cofi.eval.evaluateOnTrainSet   1
int cofi.eval.binary               0
int cofi.eval.ndcg                 1
int cofi.eval.ndcg.k               10
int cofi.eval.norm                 0
int cofi.eval.mse                  0

//------------------------------------------------------------------------------
// BMRM options
//------------------------------------------------------------------------------
double bmrm.gammaTol    0.01
double bmrm.epsilonTol  -1.0
int    bmrm.maxIter     4000 

//------------------------------------------------------------------------------
// Configuration of the losses
//------------------------------------------------------------------------------

// NDCG
int    loss.ndcg.trainK     10
double loss.ndcg.c_exponent -0.25
